"""
Django settings for assess project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""


from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

import os, json
SUPER_BASE = Path(__file__).resolve().parent.parent.parent
STORE = os.path.join(SUPER_BASE, 'store')
UNIVERSE = os.path.join(SUPER_BASE, 'store', 'django_store', 'libs', 'universe')



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-72$#b^2cb(u%exst+y2&l90$h(*bzx^v8ozwu4#ohums-fvt9b'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'assess.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'assess.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.mysql',
                'OPTIONS':{
                    'read_default_file':os.path.join(STORE, 'conf', 'assess', 'db', 'mysql.conf')
                }
            },

            'slave0':{
            
                'ENGINE': 'django.db.backends.mysql',
                'OPTIONS':{
                    'read_default_file':os.path.join(STORE, 'conf', 'assess', 'db', 'slave0.conf')
                }
            },

            'slave1':{
            
                'ENGINE': 'django.db.backends.mysql',
                'OPTIONS':{
                    'read_default_file':os.path.join(STORE, 'conf', 'assess', 'db', 'slave1.conf')
                }
            }

        }


REPLICATED_DATABASE_SLAVES = ['slave0', 'slave1']

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


SSO_SUBORDINATE_COMMUNICATION_TIMEOUT = 10
APP_SUBLEVELS = ['CustomerLevel', 'ApplicationLevel', 'OperationLevel']
CICD_STAGE = "DEV"
#[DEV, STAGE, BETA, PROD]
APP_NAMES = []
MODELS_DENIED = {}
APP_PATHS = []

with open(os.path.join(SUPER_BASE, 'store', 'conf', 'servers', 'server.json'), 'r') as f:

         SERVER = json.load(f)


LOGIN_URL = SERVER['auth']['auth_sso_login_url'] 
SSO_ROOT = SERVER['auth']['auth_sso_server_address']
SSO_TOKEN = 'X8l38Dg5R5nBU0GokViYnak8TrvVCgTHxSrIJ6PyX4cIoTedO6avbEalxdmz5C2fZEoySIOf4kyVsYQVXEjJ5qWTeyyvtCOCis0FR1Bl8fwtkZkU7RaLXJigIVmMFmlO'
SESSION_COOKIE_NAME = 'assess'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

AUTHENTICATION_BACKENDS = (
# Needed to login by username in Django admin, regardless of `allauth`
"django.contrib.auth.backends.ModelBackend",

# `allauth` specific authentication methods, such as login by e-mail
"allauth.account.auth_backends.AuthenticationBackend",
)



REST_FRAMEWORK = {
'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
'PAGE_SIZE': 10
}

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_UNIQUE_EMAIL = True
